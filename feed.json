{
    "version": "https://jsonfeed.org/version/1",
    "title": "爱WIKI",
    "subtitle": "学无止境",
    "icon": "https://i-wiki.cn/images/favicon.ico",
    "description": "渺小的沙子 无尽的空洞",
    "home_page_url": "https://i-wiki.cn",
    "items": [
        {
            "id": "https://i-wiki.cn/2024/343f91fc83c3/",
            "url": "https://i-wiki.cn/2024/343f91fc83c3/",
            "title": "Go基础-常用容器",
            "date_published": "2024-12-03T14:08:38.000Z",
            "content_html": "<h3 id=\"go中常用容器\"><a class=\"anchor\" href=\"#go中常用容器\">#</a> GO 中常用容器</h3>\n<h4 id=\"1-数组\"><a class=\"anchor\" href=\"#1-数组\">#</a> 1. 数组</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 申明时需要固定大小 var name [size] T</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> classMates <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>classMates<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>classMates<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"小红\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>classMates<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"小李\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>classMates2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"小红\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"小李\"</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 使用初始化列表初始化数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>classMates3 <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>classMates3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span> <span class=\"token comment\">// 可使用指针操作数组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>classMates3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"小红\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>classMates3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"小李\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Prinrln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>classMates<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [小明 小红 小李]</span></pre></td></tr></table></figure><h4 id=\"2-切片\"><a class=\"anchor\" href=\"#2-切片\">#</a> 2. 切片</h4>\n<p>可以理解为动态数组，切片的结构体由依稀 3 部分组成</p>\n<ul>\n<li>array 是指向底层存储数据数组的指针</li>\n<li>len 指当前切片的长度，即成员数量</li>\n<li>cap 指当前切片的容量，它总是 &gt;= len</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>source <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sli <span class=\"token operator\">:=</span> source<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// [1] 从数组下标 0 位置开始，下标 1 位置结束，不包含小标 1 的元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>sli<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 长度为 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>sli<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 容量为 3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sli<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token comment\">// 切片为原数组的引用  修改切片值即修改数组的值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [4 2 3]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 动态创建切片 make ([] T, size, cap)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>slice <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [0 0]  会被初始化为类型初始值 这里是 int 类型即为 0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 申明新的切片 区别于数组不需要指定长度</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ex <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 大小和容量都为 3</span></pre></td></tr></table></figure><p>动态扩容 append</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 append 内建函数向切片中添加元素  返回新切片  地址发生了改变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr1 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr3 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sli1 <span class=\"token operator\">:=</span> arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//len 为 2 cap 为 4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sli2 <span class=\"token operator\">:=</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">//len 为 2 cap 为 2 切片范围超出了原数组的下标范围  创建了新的数组并指向了它</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sli3 <span class=\"token operator\">:=</span> arr3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//len 为 2 cap 为 2    arr [start,end,cap] 这里指定了 cap 为 2  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>newSli1 <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sli1<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1 2 5] len 小于 cap  原数组值被覆盖为 [1 2 5 4]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>newSli2 <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sli2<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3 4 5] 超出容量 申请了新的数组底层 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>newSli3 <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sli3<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1 2 5] 超出容量 申请了新的数组底层</span></pre></td></tr></table></figure><p>复制切片 copy</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>destSli<span class=\"token punctuation\">,</span>srcSli <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 长度取决于目标切边长度 destSli</span></pre></td></tr></table></figure>",
            "tags": [
                "后端",
                "go",
                "后端",
                "go"
            ]
        },
        {
            "id": "https://i-wiki.cn/2023/e378d05a98d4/",
            "url": "https://i-wiki.cn/2023/e378d05a98d4/",
            "title": "Mysql 添加远程账号",
            "date_published": "2023-02-16T09:28:16.000Z",
            "content_html": "<ol>\n<li>\n<p>添加一个新账号</p>\n<pre><code class=\"language-mysql\">create user 'account'@'%' identified by 'password';\n\n</code></pre>\n</li>\n<li>\n<p>赋予新账号权限</p>\n<pre><code class=\"language-mysql\">grant all privileges on `Test`.* to 'account'@'%' ;\n\n#权限参考\n\tall 所有权限\n\tselect 查询权限\n\tinsert 插入权限\n\tdelete 删除权限\n\tupdate 更新权限\n\t\n*.*  所有表\t\n</code></pre>\n</li>\n<li>\n<p>刷新权限</p>\n<pre><code class=\"language-mysql\">FLUSH PRIVILEGES; \n</code></pre>\n</li>\n</ol>\n",
            "tags": [
                "后端",
                "mysql",
                "后端"
            ]
        },
        {
            "id": "https://i-wiki.cn/2023/8cf859c786e2/",
            "url": "https://i-wiki.cn/2023/8cf859c786e2/",
            "title": "Mysql8 新安装后无密码登录",
            "date_published": "2023-02-16T09:21:36.041Z",
            "content_html": "<ol>\n<li>\n<p>修改配置文件</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> /etc/my.cnf                             <span class=\"token comment\">#进入 mysql 配置文件</span></pre></td></tr></table></figure></li>\n<li>\n<p>在配置文件中设置</p>\n<pre><code>skip-grant-tables                          #即不校验密码登录\n</code></pre>\n</li>\n<li>\n<p>重启 mysql</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl restart mysqld</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span>    <span class=\"token comment\">#不用输入密码，直接回车</span></pre></td></tr></table></figure></li>\n<li>\n<p>将密码置空</p>\n<pre><code class=\"language-mysql\">update user set authentication_string='' where user = 'root';\n</code></pre>\n</li>\n<li>\n<p>删除 2 中添加的配置项并重启 mysql</p>\n</li>\n<li>\n<p>如需修改密码</p>\n<pre><code class=\"language-mysql\">\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '你的密码';\n// 刷新权限表\nFLUSH privileges;\n</code></pre>\n</li>\n</ol>\n",
            "tags": [
                "后端",
                "mysql",
                "后端"
            ]
        },
        {
            "id": "https://i-wiki.cn/2023/44b61dee094f/",
            "url": "https://i-wiki.cn/2023/44b61dee094f/",
            "title": "leetcode-1807. 替换字符串中的括号内容",
            "date_published": "2023-01-12T09:24:08.000Z",
            "content_html": "<h4 id=\"1807-替换字符串中的括号内容\"><a class=\"anchor\" href=\"#1807-替换字符串中的括号内容\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9ldmFsdWF0ZS10aGUtYnJhY2tldC1wYWlycy1vZi1hLXN0cmluZy8=\">1807. 替换字符串中的括号内容</span></h4>\n<p>难度：中等</p>\n<p>解题思路：</p>\n<ol>\n<li>knowledge 转换 hashmap 便于查找</li>\n<li>依次遍历 s，获取（）中的字符串为 key，如果 hashmap 中不存在 key 对应的 value 则替换为 &quot;?&quot;</li>\n</ol>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> knowledge <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> know <span class=\"token operator\">=</span>  <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> knowledge <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        know<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    slen <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">var</span> ans strings<span class=\"token punctuation\">.</span>Builder</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> slen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span> j<span class=\"token operator\">:=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span> slen<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok<span class=\"token operator\">:=</span> know<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        ans<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        ans<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token char\">'?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    i <span class=\"token operator\">=</span> j</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ans<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "leetcode",
                "leetcode",
                "算法"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/fd677132940e/",
            "url": "https://i-wiki.cn/2021/fd677132940e/",
            "title": "go 基础篇",
            "date_published": "2021-11-30T16:46:24.000Z",
            "content_html": "<h2 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<h4 id=\"1-变量\"><a class=\"anchor\" href=\"#1-变量\">#</a> 1. 变量</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 申明的变量必须被使用 否则编译不通过</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token builtin\">string</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>float <span class=\"token comment\">// 一个 float 类型的切片</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> d <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 申明一个匿名结构体 该结构体有一个 int 类型字段 x</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  x <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> e <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span>  <span class=\"token comment\">// 申明一个函数变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> （   <span class=\"token comment\">// 同时申明多组变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> f <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> g <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>）</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 省略类型 编译器会尝试进行类型推导</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a <span class=\"token operator\">:=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// 编译报错  </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ok\"</span> <span class=\"token comment\">// := 左值必须有一个未被定义过的变量 否则编译报错</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>c <span class=\"token operator\">:=</span> <span class=\"token number\">0.17</span> <span class=\"token comment\">// 浮点类型会被默认推导成 float64</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a  <span class=\"token comment\">// 多重赋值  可实现变量交换  从左到右依次赋值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token comment\">// 匿名变量 _ 被忽略不占用命名空间 不分配内存</span></pre></td></tr></table></figure><h4 id=\"2-原生数据类型\"><a class=\"anchor\" href=\"#2-原生数据类型\">#</a> 2. 原生数据类型</h4>\n<ul>\n<li>整型</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">int8</span>   <span class=\"token builtin\">int16</span> <span class=\"token builtin\">int32</span> <span class=\"token builtin\">int64</span> <span class=\"token comment\">// 按长度划分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">uint8</span>  <span class=\"token builtin\">uint16</span> <span class=\"token builtin\">uint32</span> <span class=\"token builtin\">uint64</span> <span class=\"token comment\">// 无符号</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 高长度类型向低长度类型转换会发生长度截取</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token builtin\">uint16</span> <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>MaxUint8 <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">//a = 256   16 位存储为 00000001 00000000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">//b = 0  转换截取后 8 位为 00000000</span></pre></td></tr></table></figure><ul>\n<li>浮点型</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">float32</span>  <span class=\"token builtin\">float64</span></pre></td></tr></table></figure><ul>\n<li>布尔型</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token boolean\">true</span> <span class=\"token boolean\">false</span></pre></td></tr></table></figure><ul>\n<li>字符串型</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基于 utf-8 编码实现  需要区分 byte (类型为 uint8) 和 rune (类型为 int32)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f <span class=\"token operator\">:=</span> <span class=\"token string\">\"golang编程\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 长度为 12 统计 ASCII 字符数量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>utf8<span class=\"token punctuation\">.</span><span class=\"token function\">RuneCountInString</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 长度为 8 统计 unicode 字符数量</span></pre></td></tr></table></figure><h4 id=\"3-指针\"><a class=\"anchor\" href=\"#3-指针\">#</a> 3. 指针</h4>\n<p>go 语言相比较 C/C++ 限制了指针的偏移和运算能力，仅包含了以下三个概念</p>\n<ul>\n<li>指针地址</li>\n<li>指针类型</li>\n<li>指针取值</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str <span class=\"token operator\">:=</span> <span class=\"token string\">\"Golang is Good!\"</span> <span class=\"token comment\">// 类型为 string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>strPrt <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>str <span class=\"token comment\">// 取址符 & amp; 获取 str 的指针  类型为 * string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>newStr <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>strPrt <span class=\"token comment\">// 取值符 * 进行了值拷贝  newStr 与 str 指针地址不同</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span>strPrt <span class=\"token operator\">=</span> <span class=\"token string\">\"PHP is Good too!\"</span> <span class=\"token comment\">// 通过指针对变量进行赋值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>str <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 new 函数直接分配内存 返回 * string 类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"Golang is Good!\"</span></pre></td></tr></table></figure><h4 id=\"4-使用flag从命令行中读取参数\"><a class=\"anchor\" href=\"#4-使用flag从命令行中读取参数\">#</a> 4. 使用 flag 从命令行中读取参数</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"flag\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tsurname <span class=\"token operator\">:=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"surname\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"您的姓\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//surname 类型为 * string</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">var</span> personalName <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tflag<span class=\"token punctuation\">.</span><span class=\"token function\">StringVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>personalName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"personalName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小二\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"您的名\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 还可以直接传入变量地址获取参数值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tid <span class=\"token operator\">:=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"您的ID\"</span><span class=\"token punctuation\">)</span>                            <span class=\"token comment\">//id 类型为 * int</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tflag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                                               <span class=\"token comment\">// 解析命令行参数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am %v %v, and my id is %v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>surname<span class=\"token punctuation\">,</span> personalName<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">go</span> run Flag<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span> <span class=\"token operator\">-</span>surname<span class=\"token operator\">=</span><span class=\"token string\">\"杜\"</span> <span class=\"token operator\">-</span>personalName<span class=\"token operator\">=</span><span class=\"token string\">\"小猫\"</span> <span class=\"token operator\">-</span>id<span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// I am 杜 小猫，and my id is 100</span></pre></td></tr></table></figure><h4 id=\"5-常量与类型别名\"><a class=\"anchor\" href=\"#5-常量与类型别名\">#</a> 5. 常量与类型别名</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 申明常量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Golang is Good!\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Golang is Good!\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tsurname <span class=\"token operator\">=</span> <span class=\"token string\">\"王\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  personalName <span class=\"token operator\">=</span> <span class=\"token string\">\"小二\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">type</span> aliasInt <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span> <span class=\"token comment\">// 定义类型别名 type name = T</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">type</span> myInt <span class=\"token builtin\">int</span> <span class=\"token comment\">// 定义了一个新的类型  本质上都是 int 类型</span></pre></td></tr></table></figure><h4 id=\"6-分支与循环控制\"><a class=\"anchor\" href=\"#6-分支与循环控制\">#</a> 6. 分支与循环控制</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//if 语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> expression1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  branch1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> expression2 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  branch2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  branch3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//switch 语句  无需 break 控制跳出 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>name <span class=\"token operator\">:=</span> <span class=\"token string\">\"小红\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">switch</span> name <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token string\">\"小红\"</span>：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"倒垃圾\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token string\">\"小明\"</span>：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">fallthrough</span>  <span class=\"token comment\">// 合并连接 case 控制体都为 fmt.Println (\"扫地\") </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token string\">\"小刚\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"扫地\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'没人干活'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//case 可接表达式</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>score <span class=\"token operator\">:=</span> <span class=\"token number\">90</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">case</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  \tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"优秀\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">case</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">90</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  \tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">case</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  \tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">case</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  \tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分数有问题\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//for 循环 init condition end 三者缺省 就是无限循环</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">for</span> init<span class=\"token punctuation\">;</span>condition<span class=\"token punctuation\">;</span>end <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">// 循环体代码</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// break</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// continue</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "后端",
                "go",
                "后端",
                "go"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/b8326b69e0d3/",
            "url": "https://i-wiki.cn/2021/b8326b69e0d3/",
            "title": "Mysql: on duplicate key update",
            "date_published": "2021-10-09T04:39:12.000Z",
            "content_html": "<h2 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h2>\n<p>在实际应用中，经常碰到导入数据的功能，当导入的数据不存在时则进行添加，有修改时则进行更新</p>\n<blockquote>\n<p>在 MySQL 数据库中，如果在 insert 语句后面带上 ON DUPLICATE KEY UPDATE 子句，而要插入的行与表中现有记录的惟一索引或主键中产生重复值，那么就会发生旧行的更新；如果插入的行数据与现有表中记录的唯一索引或者主键不重复，则执行新纪录插入操作。</p>\n<p>说通俗点就是数据库中存在某个记录时，执行这个语句会更新，而不存在这条记录时，就会插入。</p>\n</blockquote>\n<h4 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> 用法</h4>\n<p>该语句是基于唯一索引或主键使用，比如一个字段 user_id 被加上了 unique index，并且表中已经存在了一条记录值为 1, 则会更新记录 1 的 balance 字段</p>\n<blockquote>\n<p>ON DUPLICATE KEY UPDATE 后面可以放多个字段，用英文逗号分割</p>\n</blockquote>\n<pre><code class=\"language-mysql\">insert into dtm_busi.user_account (user_id, balance) \nvalues (1, 10000),\n  (2, 10000) on DUPLICATE KEY\nUPDATE balance =\nvalues (balance);\n</code></pre>\n<h4 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h4>\n<ol>\n<li>\n<p>因为这是个插入语句，所以不能加 where 条件。如果是插入操作，受到影响行的值为 1；如果更新操作，受到影响行的值为 2；如果更新的数据和已有的数据一样（就相当于没变，所有值保持不变），受到影响的行的值为 0。</p>\n</li>\n<li>\n<p>on duplicate key update 有一个特性就是，每次是更新的情况下 id 也是会自增加 1 的，比如说现在 id 最大值的 5, 然后进行了一次更新操作，再进行一次插入操作时，id 的值就变成了 7 而不是 6.</p>\n<blockquote>\n<p>为了解决这个问题，有两种方式，第一种是修改 <code>innodb_autoinc_lock_mode</code>  中的模式，第二种是将语句修拆分为更新和操作 2 个动作</p>\n<p>第一种方式:innodb_autoinc_lock_mode 中有 3 中模式，0,1 和 2,mysql5 的默认配置是 1,</p>\n<p>0 是每次分配自增 id 的时候都会锁表.<a href=\"#deadlock\"> 有死锁可能</a></p>\n<p>1 只有在 <code>bulk insert</code>  的时候才会锁表，简单 <code>insert</code>  的时候只会使用一个 light-weight mutex, 比 0 的并发性能高</p>\n<p>2  <code>simple insert</code>  语句能保证 ID 是连续的，但是 <code>bulk insert</code>  的 ID 则可能有空洞。<br />\n主从复制的同一张表下的同一行 id 有可能不一样</p>\n<p>数据库默认是 1 的情况下，就会发生上面的那种现象，每次使用 <code>insert into .. on duplicate key update </code> 的时候都会把简单自增 id 增加，不管是发生了 <code>insert</code>  还是 <code>update</code></p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"产生死锁的原因\"><a class=\"anchor\" href=\"#产生死锁的原因\">#</a> 产生死锁的原因</h4>\n<blockquote>\n<p>insert ... on duplicate key 在执行时，innodb 引擎会先判断插入的行是否产生重复 key 错误，如果存在，在对该现有的行加上 S（共享锁）锁，如果返回该行数据给 mysql, 然后 mysql 执行完 duplicate 后的 update 操作，然后对该记录加上 X（排他锁），最后进行 update 写入。</p>\n</blockquote>\n<p>如果有两个事务并发的执行同样的语句，那么就会产生 death lock，如：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/e4013517319ac323fa4be1ad92adab94.png\" alt=\"img\" /></p>\n",
            "tags": [
                "后端",
                "mysql",
                "mysql",
                "后端"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/03643db49451/",
            "url": "https://i-wiki.cn/2021/03643db49451/",
            "title": "分布式事务：DTM Workflow模式",
            "date_published": "2021-09-30T09:45:47.000Z",
            "content_html": "<h1 id=\"workflow模式\"><a class=\"anchor\" href=\"#workflow模式\">#</a> Workflow 模式</h1>\n<p>Workflow 模式是 DTM 首创推出的模式，在这个模式下，可以混合使用 XA、SAGA、TCC，也可以混合使用 HTTP、gRPC、本地操作，用户可以对分布式事务里面的绝大部分内容进行定制，具备极大的灵活性，下面我们以转账场景，讲述如何在 Workflow 下进行实现。</p>\n<h2 id=\"workflow例子\"><a class=\"anchor\" href=\"#workflow例子\">#</a> workflow 例子</h2>\n<p>Workflow 模式下，既可以使用 HTTP 协议，也可以使用 gRPC 协议，或者是本地操作。下面以 gRPC 协议作为例子，一共分为一下几步：</p>\n<ul>\n<li>初始化 SDK</li>\n<li>注册 workflow</li>\n<li>执行 workflow</li>\n</ul>\n<h4 id=\"首先需要在使用workflow前对-sdk-的-workflow-进行初始化\"><a class=\"anchor\" href=\"#首先需要在使用workflow前对-sdk-的-workflow-进行初始化\">#</a> 首先需要在使用 workflow 前对 SDK 的 Workflow 进行初始化：</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> \t<span class=\"token string\">\"github.com/dtm-labs/dtmgrpc/workflow\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化 workflow SDK，三个参数分别为：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 第一个参数，dtm 服务器地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 第二个参数，业务服务器地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 第三个参数，grpcServer</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//workflow 的需要从 \"业务服务器地址\"+\"grpcServer\" 上接收 dtm 服务器的回调</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>workflow<span class=\"token punctuation\">.</span><span class=\"token function\">InitGrpc</span><span class=\"token punctuation\">(</span>dtmGrpcServer<span class=\"token punctuation\">,</span> busi<span class=\"token punctuation\">.</span>BusiGrpc<span class=\"token punctuation\">,</span> gsvr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"然后需要注册workflow的处理函数\"><a class=\"anchor\" href=\"#然后需要注册workflow的处理函数\">#</a> 然后需要注册 workflow 的处理函数</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wfName <span class=\"token operator\">:=</span> <span class=\"token string\">\"wf_saga\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>err <span class=\"token operator\">:=</span> workflow<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>wfName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>wf <span class=\"token operator\">*</span>workflow<span class=\"token punctuation\">.</span>Workflow<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  req <span class=\"token operator\">:=</span> <span class=\"token function\">MustUnmarshalReqGrpc</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  wf<span class=\"token punctuation\">.</span><span class=\"token function\">NewBranch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnRollback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>bb <span class=\"token operator\">*</span>dtmcli<span class=\"token punctuation\">.</span>BranchBarrier<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> busi<span class=\"token punctuation\">.</span>BusiCli<span class=\"token punctuation\">.</span><span class=\"token function\">TransOutRevert</span><span class=\"token punctuation\">(</span>wf<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> busi<span class=\"token punctuation\">.</span>BusiCli<span class=\"token punctuation\">.</span><span class=\"token function\">TransOut</span><span class=\"token punctuation\">(</span>wf<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  wf<span class=\"token punctuation\">.</span><span class=\"token function\">NewBranch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnRollback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>bb <span class=\"token operator\">*</span>dtmcli<span class=\"token punctuation\">.</span>BranchBarrier<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> busi<span class=\"token punctuation\">.</span>BusiCli<span class=\"token punctuation\">.</span><span class=\"token function\">TransInRevert</span><span class=\"token punctuation\">(</span>wf<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> busi<span class=\"token punctuation\">.</span>BusiCli<span class=\"token punctuation\">.</span><span class=\"token function\">TransIn</span><span class=\"token punctuation\">(</span>wf<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>这个注册操作需要在业务服务启动之后执行，因为当进程 crash，dtm 会回调业务服务器，继续未完成的任务</li>\n<li>上述代码 <code>NewBranch</code>  会创建一个事务分支，一个分支会包括一个正向操作，以及全局事务提交 / 回滚时的回调</li>\n<li><code>OnRollback/OnCommit</code>  会给当前事务分支指定全局事务回滚 / 提交时的回调，上述代码中，只指定了 <code>OnRollback</code> ，属于 Saga 模式</li>\n<li>这里面的  <code>busi.BusiCli</code>  需要添加 workflow 的拦截器，该拦截器会自动把 rpc 的请求结果记录到 dtm，如下所示</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn1<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span>busi<span class=\"token punctuation\">.</span>BusiGrpc<span class=\"token punctuation\">,</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">WithUnaryInterceptor</span><span class=\"token punctuation\">(</span>workflow<span class=\"token punctuation\">.</span>Interceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nossl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>busi<span class=\"token punctuation\">.</span>BusiCli <span class=\"token operator\">=</span> busi<span class=\"token punctuation\">.</span><span class=\"token function\">NewBusiClient</span><span class=\"token punctuation\">(</span>conn1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当然您也可以给所有的 gRPC client 添加 <code>workflow.Interceptor</code> ，这个中间件只会处理 <code>wf.Context</code>  和 <code>wf.NewBranchContext()</code>  下的请求</p>\n<ul>\n<li>当工作流函数返回 nil/ErrFailure，全局事务会进入 Commit/Rollback 阶段，反序调用函数内部 OnCommit/OnRollback 注册的操作</li>\n</ul>\n<h4 id=\"最后是执行workflow\"><a class=\"anchor\" href=\"#最后是执行workflow\">#</a> 最后是执行 workflow</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>req <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>busi<span class=\"token punctuation\">.</span>ReqGrpc<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>err <span class=\"token operator\">=</span> workflow<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>wfName<span class=\"token punctuation\">,</span> shortuuid<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtmgimp<span class=\"token punctuation\">.</span><span class=\"token function\">MustProtoMarshal</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>当 Execute 的结果为 <code>nil/ErrFailure</code>  时，全局事务已成功 / 已回滚。</li>\n<li>当 Execute 的结果为其他值时，dtm 服务器后续会回调这个工作流任务进行重试</li>\n</ul>\n<h2 id=\"workflow原理\"><a class=\"anchor\" href=\"#workflow原理\">#</a> workflow 原理</h2>\n<p>workflow 是如何保证分布式事务的数据一致性呢？当业务进程出现 crash 等问题时，dtm 服务器会发现这个 workflow 全局事务超时未完成，那么 dtm 会采用指数回避的策略，对 workflow 事务进行重试。当 workflow 的重试请求到达业务服务，SDK 会从 dtm 服务器读取全局事务的进度，对于已完成的分支，会将之前保存的结果，通过 gRPC/HTTP 等拦截器，直接返回分支结果。最终 workflow 会顺利完成。</p>\n<p>工作流函数需要做到幂等，即第一次调用，或者后续重试，都应当获得同样的结果</p>\n<h2 id=\"workflow下的saga\"><a class=\"anchor\" href=\"#workflow下的saga\">#</a> Workflow 下的 Saga</h2>\n<p>Saga 模式源自于这篇论文 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MuY29ybmVsbC5lZHUvYW5kcnUvY3M3MTEvMjAwMmZhL3JlYWRpbmcvc2FnYXMucGRm\">SAGAS</span>，其核心思想是将长事务拆分为多个短事务，由 Saga 事务协调器协调，如果每个短事务都成功提交完成，那么全局事务就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。</p>\n<p>在 Workflow 模式下，您可以在函数中，直接调用正向操作的函数，然后将补偿操作写到分支的 <code>OnRollback</code> ，那么补偿操作就会自动被调用，达到了 Saga 模式的效果</p>\n<h2 id=\"workflow下的tcc\"><a class=\"anchor\" href=\"#workflow下的tcc\">#</a> Workflow 下的 Tcc</h2>\n<p>Tcc 模式源自于这篇论文 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNzLnVjaS5lZHUvfmNzMjIzL3BhcGVycy9jaWRyMDdwMTUucGRm\">Life beyond Distributed Transactions:an Apostate’s Opinion</span>，他将一个大事务分成多个小事务，每个小事务有三个操作：</p>\n<ul>\n<li>Try 阶段：尝试执行，完成所有业务检查（一致性）, 预留必须业务资源（准隔离性）</li>\n<li>Confirm 阶段：如果所有分支的 Try 都成功了，则走到 Confirm 阶段。Confirm 真正执行业务，不作任何业务检查，只使用 Try 阶段预留的业务资源</li>\n<li>Cancel 阶段：如果所有分支的 Try 有一个失败了，则走到 Cancel 阶段。Cancel 释放 Try 阶段预留的业务资源。</li>\n</ul>\n<p>对于我们的 A 跨行转账给 B 的场景，如果采用 SAGA，在正向操作中调余额，在补偿操作中，反向调整余额，那 么会出现以下情况：</p>\n<ul>\n<li>A 扣款成功</li>\n<li>A 看到余额减少，并告诉 B</li>\n<li>金额转入 B 失败，整个事务回滚</li>\n<li>B 一直收不到这笔资金</li>\n</ul>\n<p>这样给 AB 双方带来了极大的困扰。这种情况在 SAGA 中无法避免，但是可以通过 TCC 来解决，设计技巧如下：</p>\n<ul>\n<li>在账户中的 balance 字段之外，再引入一个 trading_balance 字段</li>\n<li>Try 阶段检查账户是否被冻结，检查账户余额是否充足，没问题后，调整 trading_balance （即业务上的冻结资金）</li>\n<li>Confirm 阶段，调整 balance ，调整 trading_balance （即业务上的解冻资金）</li>\n<li>Cancel 阶段，调整 trading_balance （即业务上的解冻资金）</li>\n</ul>\n<p>这种情况下，一旦终端用户 A 看到自己的余额扣减了，那么 B 一定能够收到资金</p>\n<p>在 Workflow 模式下，您可以在函数中，直接调用 <code>Try</code>  操作，然后将 <code>Confirm</code>  操作写到分支的 <code>OnCommit</code> ，将 <code>Cancel</code>  操作写到分支的 <code>OnRollback</code> ，达到了 <code>Tcc</code>  模式的效果</p>\n<h2 id=\"workflow下的xa\"><a class=\"anchor\" href=\"#workflow下的xa\">#</a> Workflow 下的 XA</h2>\n<p>XA 是由 X/Open 组织提出的分布式事务的规范，XA 规范主要定义了 (全局) 事务管理器 (TM) 和 (局部) 资源管理器 (RM) 之间的接口。本地的数据库如 mysql 在 XA 中扮演的是 RM 角色</p>\n<p>XA 一共分为两阶段：</p>\n<p>第一阶段（prepare）：即所有的参与者 RM 准备执行事务并锁住需要的资源。参与者 ready 时，向 TM 报告已准备就绪。 第二阶段 (commit/rollback)：当事务管理者 (TM) 确认所有参与者 (RM) 都 ready 后，向所有参与者发送 commit 命令。</p>\n<p>目前主流的数据库基本都支持 XA 事务，包括 mysql、oracle、sqlserver、postgre</p>\n<p>在 Workflow 模式下，你可以在工作流函数中，调用 <code>NewBranch().DoXa</code>  来开启您的 XA 事务分支。</p>\n<h2 id=\"多种模式混合使用\"><a class=\"anchor\" href=\"#多种模式混合使用\">#</a> 多种模式混合使用</h2>\n<p>在 Workflow 模式下，上述的 Saga、Tcc、XA 都是分支事务的模式，因此可以部分分支采用一种模式，其他分支采用另一种模式。这种混合模式带来的灵活性可以做到根据分支事务的特性选择子模式，因此建议如下：</p>\n<ul>\n<li>XA：如果业务没有行锁争抢，那么可以采用 XA，这个模式需要的额外开发量比较低， <code>Commit/Rollback</code>  是数据库自动完成的。例如这个模式适合创建订单业务，不同的订单锁定的订单行不同，相互之间并发无影响；不适合扣减库存，因为涉及同一个商品的订单都会争抢这个商品的行锁，会导致并发度低。</li>\n<li>Saga：不适合 XA 的普通业务可以采用这个模式，这个模式额外的开发量比 Tcc 要少，只需要开发正向操作和补偿操作</li>\n<li>Tcc：适合一致性要求较高，例如前面介绍的转账，这个模式额外的开发量最多，需要开发包括 <code>Try/Confirm/Cancel</code></li>\n</ul>\n<h2 id=\"grpc支持\"><a class=\"anchor\" href=\"#grpc支持\">#</a> gRPC 支持</h2>\n<p>对 gRPC 的支持，包括两个方面：</p>\n<ul>\n<li>以 gRPC 协议方式与 dtm 服务器通信，例如上面例子中，调用上述的 <code>workflow.InitGrpc</code>  初始化后，dtm 的 SDK 会走 gRPC 接口与 dtm 服务器交互</li>\n<li>以 gRPC 协议方式访问事务分支，例如上面例子中 <code>reply, err = busi.BusiCli.TransIn(wf.Context, req)</code> ，这个 gRPC 调用中，会通过 gRPC 的拦截器，自动将调用结果保存到 dtm 服务器，并在 workflow 再次执行时，自动将 dtm 服务器保存的结果，直接返回给调用者。</li>\n</ul>\n<h2 id=\"http-支持\"><a class=\"anchor\" href=\"#http-支持\">#</a> HTTP 支持</h2>\n<p>对 HTTP 的支持，包括两个方面：</p>\n<ul>\n<li>以 HTTP 协议方式与 dtm 服务器通信，Workflow 下的 <code>workflow.InitHTTP</code>  初始化后，dtm 的 SDK 会走 HTTP 接口与 dtm 服务器交互</li>\n<li>以 HTTP 协议方式访问事务分支，例如 <code>resp, err := wf.NewBranch().NewRequest().SetBody(req).Post(Busi + &quot;/TransOut&quot;)</code> ，在这个 HTTP 的调用中，会通过 HTTP 的拦截器，自动将调用结果保存到 dtm 服务器，并在 workflow 再次执行时，自动将 dtm 服务器保存的结果，直接返回给调用者。</li>\n</ul>\n<h2 id=\"本地操作支持\"><a class=\"anchor\" href=\"#本地操作支持\">#</a> 本地操作支持</h2>\n<p>在 Workflow 模式下，你的事务分支，不仅可以采用 HTTP/gRPC 等远程分支，也可以是本地操作。下面的代码演示了一个本地事务操作：</p>\n<pre><code>wf.Do(func(bb *dtmcli.BranchBarrier) ([]byte, error) &#123;\n  return nil, bb.CallWithDB(dbGet(), func(tx *sql.Tx) error &#123;\n    return busi.SagaAdjustBalance(tx, busi.TransOutUID, -req.Amount, &quot;&quot;)\n  &#125;)\n&#125;)\n</code></pre>\n<p>您可以进行本地事务操作，也可以进行其他操作，灵活使用</p>\n<h2 id=\"grpchttp本地-混合使用\"><a class=\"anchor\" href=\"#grpchttp本地-混合使用\">#</a> gRPC/HTTP/ 本地 混合使用</h2>\n<p>在一个分布式事务中，您也可以混合使用 gRPC/HTTP/ 本地 这些方式去处理你的事务分支，可以给您极大的灵活性。对于多技术栈，对于多协议并存，以及将已有的遗留系统接入分布式事务等各种场景，提供了非常好的解决方案。</p>\n<h2 id=\"幂等要求\"><a class=\"anchor\" href=\"#幂等要求\">#</a> 幂等要求</h2>\n<p>在 Workflow 模式下，当 crash 发生时，会进行重试，因此要求各个操作支持幂等，即多次调用和一次调用的结果是一样的，返回相同的结果。业务中，通常采用数据库的 <code>unique key</code>  来实现幂等，具体为 <code>insert ignore &quot;unique-key&quot;</code> ，如果插入失败，说明这个操作已完成，此次直接忽略返回；如果插入成功，说明这是首次操作，继续后续的业务操作。</p>\n<p>如果您的业务本身就是幂等的，那么您直接操作您的业务即可；如果您的业务未提供幂等功能，那么 dtm 提供了 <code>BranchBarrier</code>  辅助类，基于上述 unique-key 原理，可以方便的帮助开发者实现在 <code>Mysql/Mongo/Redis</code>  中实现幂等操作。</p>\n<p>以下两个是典型的非幂等操作，请注意：</p>\n<ul>\n<li>超时回滚：假如您的业务中有一个操作可能耗时长，并且您想要让您的全局事务在等待超时后，返回失败，进行回滚。那么这个就不是幂等操作，因为在极端情况下，两个进程同时调用了该操作，一个返回了超时失败，而另一个返回了成功，导致结果不同</li>\n<li>达到重试上限后回滚：分析过程同上。</li>\n</ul>\n<p>Workflow 模式暂未支持上述的超时回滚及重试达到上限后回滚，如果您有相关的场景需求，欢迎把具体场景给我们，我们将积极考虑是否添加这种的支持</p>\n<h2 id=\"分支操作结果\"><a class=\"anchor\" href=\"#分支操作结果\">#</a> 分支操作结果</h2>\n<p>分支操作会返回以下几种结果：</p>\n<ul>\n<li>成功：分支操作返回 <code>HTTP-200/gRPC-nil</code></li>\n<li>业务失败：分支操作返回 <code>HTTP-409/gRPC-Aborted</code> ，不再重试，全局事务需要进行回滚</li>\n<li>进行中：分支操作返回 <code>HTTP-425/gRPC-FailPrecondition</code> ，这个结果表示事务正在正常进行中，要求 dtm 重试时，不要采用指数退避算法，而是采用固定间隔重试</li>\n<li>未知错误 ：分支操作返回其他结果，表示未知错误，dtm 会重试这个工作流，采用指数退避算法</li>\n</ul>\n<p>如果您的现有服务与上述的结果不同，那么您可以通过 <code>workflow.Options.HTTPResp2DtmError/GRPCError2DtmError</code>  来定制这部分结果</p>\n<p>Saga 的补偿操作、Tcc 的 Confirm/Cancel 操作，按照 Saga 和 Tcc 的协议，是不允许返回业务上的失败，因为到了工作流的第二阶段 Commit/Rollback，此时既不成功，也不让重试，那么全局事务无法完成，这点请开发者在设计时就要注意避免</p>\n<h2 id=\"事务完成通知\"><a class=\"anchor\" href=\"#事务完成通知\">#</a> 事务完成通知</h2>\n<p>部分业务场景，想要获得事务完成的通知，这个功能可以通过在第一个事务分支上设置 <code>OnFinish</code>  回调来实现。当回调函数被调用时，所有的业务操作已经执行完毕，因此全局事务在实质上已经完成。回调函数可以依据传入的 <code>isCommit</code>  来判断全局事务最终提交了还是回滚了。</p>\n<p>有一个地方需要注意，收到 <code>OnFinish</code>  回调时，dtm 服务器上，这个事务的状态还未修改为最终状态，因此如果混合使用事务完成通知和查询全局事务结果，那么两者的结果可能不一致，建议用户只使用其中一种方式，而不要混合使用。</p>\n",
            "tags": [
                "后端",
                "分布式事务",
                "事务模式",
                "后端",
                "分布式事务",
                "事务模式"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/d0caa7cb6848/",
            "url": "https://i-wiki.cn/2021/d0caa7cb6848/",
            "title": "分布式事务：DTM XA模式",
            "date_published": "2021-09-30T09:34:59.000Z",
            "content_html": "<h1 id=\"xa事务模式\"><a class=\"anchor\" href=\"#xa事务模式\">#</a> XA 事务模式</h1>\n<h2 id=\"xa是什么\"><a class=\"anchor\" href=\"#xa是什么\">#</a> XA 是什么</h2>\n<p>XA 是由 X/Open 组织提出的分布式事务的规范，XA 规范主要定义了 (全局) 事务管理器 (TM) 和 (局部) 资源管理器 (RM) 之间的接口。本地的数据库如 mysql 在 XA 中扮演的是 RM 角色</p>\n<p>XA 一共分为两阶段：</p>\n<p>第一阶段（prepare）：即所有的参与者 RM 准备执行事务并锁住需要的资源。参与者 ready 时，向 TM 报告已准备就绪。 第二阶段 (commit/rollback)：当事务管理者 (TM) 确认所有参与者 (RM) 都 ready 后，向所有参与者发送 commit 命令。</p>\n<p>目前主流的数据库基本都支持 XA 事务，包括 mysql、oracle、sqlserver、postgre</p>\n<p>我们看看本地数据库是如何支持 XA 的：</p>\n<p>第一阶段 准备</p>\n<pre><code class=\"language-mysql\">XA start '4fPqCNTYeSG' -- 开启一个 xa 事务\nUPDATE `user_account` SET `balance`=balance + 30,`update_time`='2021-06-09 11:50:42.438' WHERE user_id = '1'\nXA end '4fPqCNTYeSG'\nXA prepare '4fPqCNTYeSG' -- 此调用之前，连接断开，那么事务会自动回滚\n-- 当所有的参与者完成了prepare，就进入第二阶段 提交\nxa commit '4fPqCNTYeSG'\n</code></pre>\n<h2 id=\"xa实战\"><a class=\"anchor\" href=\"#xa实战\">#</a> XA 实战</h2>\n<p>我们来完成一个完整的 XA，我们先看一个成功的 XA 时序图：</p>\n<p><img data-src=\"https://dtm.pub/assets/xa_normal.5a0ce600.jpg\" alt=\"xa_normal\" /></p>\n<h3 id=\"http接入示例\"><a class=\"anchor\" href=\"#http接入示例\">#</a> HTTP 接入示例</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gid <span class=\"token operator\">:=</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">MustGenGid</span><span class=\"token punctuation\">(</span>dtmutil<span class=\"token punctuation\">.</span>DefaultHTTPServer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\terr <span class=\"token operator\">:=</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">XaGlobalTransaction</span><span class=\"token punctuation\">(</span>dtmutil<span class=\"token punctuation\">.</span>DefaultHTTPServer<span class=\"token punctuation\">,</span> gid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>xa <span class=\"token operator\">*</span>dtmcli<span class=\"token punctuation\">.</span>Xa<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>resty<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> xa<span class=\"token punctuation\">.</span><span class=\"token function\">CallBranch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>busi<span class=\"token punctuation\">.</span>TransReq<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> busi<span class=\"token punctuation\">.</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransOutXa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">,</span> err</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> xa<span class=\"token punctuation\">.</span><span class=\"token function\">CallBranch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>busi<span class=\"token punctuation\">.</span>TransReq<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> busi<span class=\"token punctuation\">.</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInXa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span>BusiAPI<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInXa\"</span><span class=\"token punctuation\">,</span> dtmutil<span class=\"token punctuation\">.</span><span class=\"token function\">WrapHandler2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">XaLocalTransaction</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BusiConf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>sql<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">,</span> xa <span class=\"token operator\">*</span>dtmcli<span class=\"token punctuation\">.</span>Xa<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">AdjustBalance</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">,</span> TransInUID<span class=\"token punctuation\">,</span> <span class=\"token function\">reqFrom</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Amount<span class=\"token punctuation\">,</span> <span class=\"token function\">reqFrom</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>TransInResult<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span>BusiAPI<span class=\"token operator\">+</span><span class=\"token string\">\"/TransOutXa\"</span><span class=\"token punctuation\">,</span> dtmutil<span class=\"token punctuation\">.</span><span class=\"token function\">WrapHandler2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">XaLocalTransaction</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BusiConf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>sql<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">,</span> xa <span class=\"token operator\">*</span>dtmcli<span class=\"token punctuation\">.</span>Xa<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">AdjustBalance</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">,</span> TransOutUID<span class=\"token punctuation\">,</span> <span class=\"token function\">reqFrom</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Amount<span class=\"token punctuation\">,</span> <span class=\"token function\">reqFrom</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>TransOutResult<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>详细例子代码参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2R0bS1sYWJzL2R0bS1leGFtcGxlcw==\"> dtm-examples</span>：可以通过以下命令运行这个示例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>go run main.go http_xa</pre></td></tr></table></figure><p>上面的代码首先注册了一个全局 XA 事务，然后添加了两个子事务 TransOut、TransIn。子事务全部执行成功之后，提交给 dtm。dtm 收到提交的 xa 全局事务后，会调用所有子事务的 xa commit，完成整个 xa 事务。</p>\n<h3 id=\"失败回滚\"><a class=\"anchor\" href=\"#失败回滚\">#</a> 失败回滚</h3>\n<p>如果有一阶段 prepare 操作失败，那么 dtm 会调用各子事务的 xa rollback，进行回滚，最后事务成功回滚。</p>\n<p>我们在上述 XaFireRequest 的请求负荷中，传递 TransInResult=FAILURE，让他失败</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>req <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>busi<span class=\"token punctuation\">.</span>TransReq<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> TransInResult<span class=\"token punctuation\">:</span> <span class=\"token string\">\"FAILURE\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>失败的时序图如下：</p>\n<p><img data-src=\"https://dtm.pub/assets/xa_rollback.dccc3558.jpg\" alt=\"xa_rollback\" /></p>\n<h3 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h3>\n<ul>\n<li>dtm 的 XA 事务接口在 v1.13.0 做了一次变更，大幅简化了 XA 事务的使用，整体上与 TCC 的接口保持一致，更易于上手。</li>\n<li>XA 事务的第二阶段处理，即分支的最终提交或回滚，也会发往 API  <code>BusiAPI+&quot;/TransOutXa&quot;</code> ，在这个服务的内部， <code>dtmcli.XaLocalTransaction</code>  会自动做 <code>xa commit | xa rollback</code> ， 此时请求的 body 为 nil，因此解析 body 之类的操作，如前面的 <code>reqFrom</code>  需要放在 <code>XaLocalTransaction</code>  内部，否则会解析 body 出错.</li>\n</ul>\n<h3 id=\"xa事务的特点\"><a class=\"anchor\" href=\"#xa事务的特点\">#</a> XA 事务的特点：</h3>\n<ul>\n<li>简单易理解</li>\n<li>开发较容易，回滚之类的操作，由底层数据库自动完成</li>\n<li>对资源进行了长时间的锁定，并发度低，不适合高并发的业务</li>\n</ul>\n",
            "tags": [
                "后端",
                "分布式事务",
                "事务模式",
                "后端",
                "分布式事务",
                "事务模式"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/ddd8b3452e91/",
            "url": "https://i-wiki.cn/2021/ddd8b3452e91/",
            "title": "分布式事务：DTM TCC模式",
            "date_published": "2021-09-30T04:11:46.000Z",
            "content_html": "<h1 id=\"tcc事务模式\"><a class=\"anchor\" href=\"#tcc事务模式\">#</a> TCC 事务模式</h1>\n<p>什么是 TCC，TCC 是 Try、Confirm、Cancel 三个词语的缩写，最早是由 Pat Helland 于 2007 年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。</p>\n<h2 id=\"tcc组成\"><a class=\"anchor\" href=\"#tcc组成\">#</a> TCC 组成</h2>\n<p>TCC 分为 3 个阶段</p>\n<ul>\n<li>Try 阶段：尝试执行，完成所有业务检查（一致性）, 预留必须业务资源（准隔离性）</li>\n<li>Confirm 阶段：如果所有分支的 Try 都成功了，则走到 Confirm 阶段。Confirm 真正执行业务，不作任何业务检查，只使用 Try 阶段预留的业务资源</li>\n<li>Cancel 阶段：如果所有分支的 Try 有一个失败了，则走到 Cancel 阶段。Cancel 释放 Try 阶段预留的业务资源。</li>\n</ul>\n<p>如果我们要进行一个类似于银行跨行转账的业务，转出（TransOut）和转入（TransIn）分别在不同的微服务里，一个成功完成的 TCC 事务典型的时序图如下：</p>\n<p><img data-src=\"https://dtm.pub/assets/tcc_normal.dea14fb3.jpg\" alt=\"tcc_normal\" /></p>\n<h2 id=\"简单的tcc\"><a class=\"anchor\" href=\"#简单的tcc\">#</a> 简单的 TCC</h2>\n<p>我们来完成一个最简单的 TCC：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>err <span class=\"token operator\">:=</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">TccGlobalTransaction</span><span class=\"token punctuation\">(</span>DtmServer<span class=\"token punctuation\">,</span> gid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tcc <span class=\"token operator\">*</span>dtmcli<span class=\"token punctuation\">.</span>Tcc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>resty<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tcc<span class=\"token punctuation\">.</span><span class=\"token function\">CallBranch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TransReq<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransOut\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransOutConfirm\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransOutRevert\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">,</span> err</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> tcc<span class=\"token punctuation\">.</span><span class=\"token function\">CallBranch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TransReq<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransIn\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInConfirm\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInRevert\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>调用 TccGlobalTransaction 会开启一个全局的 tcc 事务。他的声明如下：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TccGlobalTransaction begin a tcc global transaction</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//dtm dtm 服务器地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//gid 全局事务 id</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//tccFunc tcc 事务函数，里面会定义全局事务的分支</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">TccGlobalTransaction</span><span class=\"token punctuation\">(</span>dtm <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> gid <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> tccFunc TccGlobalFunc<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span></pre></td></tr></table></figure><p>开启成功之后，会调用第三个参数传递的函数 tccFunc。我们在这个函数的内部调用了 CallBranch 来定义了两个子事务 TransOut 和 TransIn。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// CallBranch call a tcc branch</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 函数首先注册子事务的所有分支操作，成功后调用 try，返回 try 的调用结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>Tcc<span class=\"token punctuation\">)</span> <span class=\"token function\">CallBranch</span><span class=\"token punctuation\">(</span>body <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> tryURL <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> confirmURL <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> cancelURL <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>resty<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当 tccFunc 正常返回时，TccGlobalTransaction 会提交全局事务，然后返回给调用者。dtm 收到提交请求，则会调用所有注册事务分支的二阶段 Confirm。TccGlobalTransaction 返回时，一阶段的 Try 已经全部完成，但是二阶段的 Confirm 通常还未完成。</p>\n<h2 id=\"失败回滚\"><a class=\"anchor\" href=\"#失败回滚\">#</a> 失败回滚</h2>\n<p>如果 tccFunc 返回错误，TccGlobalTransaction 会终止全局事务，然后返回给调用者。dtm 收到终止请求，则会调用所有注册子事务的二阶段 Cancel。</p>\n<p>我们将上述的第二个 Try 调用，传递参数，让他失败</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res2<span class=\"token punctuation\">,</span> rerr <span class=\"token operator\">:=</span> tcc<span class=\"token punctuation\">.</span><span class=\"token function\">CallBranch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TransReq<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> TransInResult<span class=\"token punctuation\">:</span> <span class=\"token string\">\"FAILURE\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransIn\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInConfirm\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInRevert\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>失败的时序图如下：</p>\n<p><img data-src=\"https://dtm.pub/assets/tcc_rollback.f28601d7.jpg\" alt=\"tcc_rollback\" /></p>\n<h2 id=\"confirmcancel操作异常\"><a class=\"anchor\" href=\"#confirmcancel操作异常\">#</a> Confirm/Cancel 操作异常</h2>\n<p>假如 Confirm/Cancel 操作遇见失败会怎么样？按照 Tcc 模式的协议，Confirm/Cancel 操作是要求最终成功的，遇见失败的情况，都是由于临时故障或者程序 bug。dtm 在 Confirm/Cancel 操作遇见失败时，会不断进行重试，直到成功。</p>\n<h2 id=\"tcc-设计原则\"><a class=\"anchor\" href=\"#tcc-设计原则\">#</a> TCC 设计原则</h2>\n<p>在设计上，TCC 主要用于处理一致性要求较高、需要较多灵活性的短事务：</p>\n<h4 id=\"tcc如何做到更好的一致性\"><a class=\"anchor\" href=\"#tcc如何做到更好的一致性\">#</a> TCC 如何做到更好的一致性</h4>\n<p>对于我们的 A 跨行转账给 B 的场景，如果采用 SAGA，在正向操作中调余额，在补偿操作中，反向调整余额，那么会出现这种情况：如果 A 扣款成功，金额转入 B 失败，最后回滚，把 A 的余额调整为初始值。整个过程中如果 A 发现自己的余额被扣减了，但是收款方 B 迟迟没有收到资金，那么会对 A 造成非常大的困扰。</p>\n<p>上述需求在 SAGA 中无法解决，但是可以通过 TCC 来解决，设计技巧如下：</p>\n<ul>\n<li>在账户中的 balance 字段之外，再引入一个 trading_balance 字段</li>\n<li>Try 阶段检查账户是否被冻结，检查账户余额是否充足，没问题后，调整 trading_balance （即业务上的冻结资金）</li>\n<li>Confirm 阶段，调整 balance ，调整 trading_balance （即业务上的解冻资金）</li>\n<li>Cancel 阶段，调整 trading_balance （即业务上的解冻资金）</li>\n</ul>\n<p>这种情况下，终端用户 A 就不会看到自己的余额扣减了，但是 B 又迟迟收不到资金的情况</p>\n<h4 id=\"为什么只适合短事务\"><a class=\"anchor\" href=\"#为什么只适合短事务\">#</a> 为什么只适合短事务</h4>\n<p>TCC 的事务编排放在了应用端上，就是事务一共包含多少个分支，每个分支的顺序什么样，这些信息不会像 SAGA 那样，都发送给 dtm 服务器之后，再去调用实际的事务分支。当应用出现 crash 或退出，编排信息丢失，那么整个全局事务，就没有办法往前重试，只能够进行回滚。如果全局事务持续时间很长，例如一分钟以上，那么当应用进行正常的发布升级时，也会导致全局事务回滚，影响业务。因此 TCC 会更适合短事务。</p>\n<p>那么是否可以把 TCC 的事务编排都保存到服务器，保证应用重启也不受到影响呢？理论上这种做法是可以解决这个问题的，但是存储到服务器会比在应用端更不灵活，无法获取到每个分支的中间结果，无法做嵌套等等。</p>\n<p>考虑到一致性要求较高和短事务是高度相关的（一个中间不一致状态持续很长时间的事务，自然不能算一致性较好），这两者跟 “应用灵活编排”，也是有较高相关度，所以将 TCC 实现为应用端编排，而 SAGA 实现为服务端编排。</p>\n<h2 id=\"嵌套的tcc\"><a class=\"anchor\" href=\"#嵌套的tcc\">#</a> 嵌套的 TCC</h2>\n<p>dtm 的 Tcc 事务模式，支持子事务嵌套，流程图如下：</p>\n<p><img data-src=\"https://dtm.pub/assets/nested_trans.23261beb.jpg\" alt=\"nested_trans\" /></p>\n<p>在这个流程图中，Order 这个微服务，管理了订单相关的数据修改，同时还管理了一个嵌套的子事务，因此他即扮演了 RM 的角色，也扮演了 AP 的角色。</p>\n<h4 id=\"嵌套示例\"><a class=\"anchor\" href=\"#嵌套示例\">#</a> 嵌套示例</h4>\n<p>tcc 支持嵌套的子事务，代码如下：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>err <span class=\"token operator\">:=</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">TccGlobalTransaction</span><span class=\"token punctuation\">(</span>DtmServer<span class=\"token punctuation\">,</span> gid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tcc <span class=\"token operator\">*</span>dtmcli<span class=\"token punctuation\">.</span>Tcc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>resty<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tcc<span class=\"token punctuation\">.</span><span class=\"token function\">CallBranch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TransReq<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransOut\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransOutConfirm\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransOutRevert\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">,</span> err</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> tcc<span class=\"token punctuation\">.</span><span class=\"token function\">CallBranch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TransReq<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInTccParent\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInConfirm\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInRevert\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里的 TransInTccParent 子事务，里面会再调用 TransIn 子事务，代码如下：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span>BusiAPI<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInTccParent\"</span><span class=\"token punctuation\">,</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">WrapHandler2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  tcc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">TccFromReq</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  logrus<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TransInTccParent \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> tcc<span class=\"token punctuation\">.</span><span class=\"token function\">CallBranch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>TransReq<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token function\">reqFrom</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Amount<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransIn\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInConfirm\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInRevert\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>子事务嵌套时，从传入的请求中构建 tcc 对象，然后就能够正常使用 tcc 对象，进行相关的事务。</p>\n",
            "tags": [
                "后端",
                "分布式事务",
                "事务模式",
                "后端",
                "分布式事务",
                "事务模式"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/22f84f93ed46/",
            "url": "https://i-wiki.cn/2021/22f84f93ed46/",
            "title": "分布式事务：DTM 二阶段消息模式",
            "date_published": "2021-09-29T10:23:12.000Z",
            "content_html": "<h1 id=\"二阶段消息\"><a class=\"anchor\" href=\"#二阶段消息\">#</a> 二阶段消息</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>本文提出的二阶段消息，可以完美替代现有的事务消息或本地消息表架构。</p>\n<p>下面我们以跨行转账作为例子，给大家详解这种新架构。业务场景介绍如下：</p>\n<p>我们需要跨行从 A 转给 B 30 元，我们先进行可能失败的转出操作 TransOut，即进行 A 扣减 30 元。如果 A 因余额不足扣减失败，那么转账直接失败，返回错误；如果扣减成功，那么进行下一步转入操作，因为转入操作没有余额不足的问题，可以假定转入操作一定会成功。</p>\n<h2 id=\"http-接入\"><a class=\"anchor\" href=\"#http-接入\">#</a> HTTP 接入</h2>\n<p>二阶段消息完成上述任务的核心代码如下所示：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>msg <span class=\"token operator\">:=</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">NewMsg</span><span class=\"token punctuation\">(</span>DtmServer<span class=\"token punctuation\">,</span> gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>busi<span class=\"token punctuation\">.</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransIn\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>TransReq<span class=\"token punctuation\">&#123;</span>Amount<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>err <span class=\"token operator\">:=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">DoAndSubmitDB</span><span class=\"token punctuation\">(</span>busi<span class=\"token punctuation\">.</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/QueryPreparedB\"</span><span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tx <span class=\"token operator\">*</span>sql<span class=\"token punctuation\">.</span>Tx<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> busi<span class=\"token punctuation\">.</span><span class=\"token function\">SagaAdjustBalance</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> busi<span class=\"token punctuation\">.</span>TransOutUID<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>req<span class=\"token punctuation\">.</span>Amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这部分代码中</p>\n<ul>\n<li>首先生成一个 DTM 的 msg 全局事务，传递 dtm 的服务器地址和全局事务 id</li>\n<li>给 msg 添加一个分支业务逻辑，这里的业务逻辑为余额转入操作 TransIn，然后带上这个服务需要传递的数据，金额 30 元</li>\n<li>然后调用 msg 的 DoAndSubmitDB，这个函数保证业务成功执行和 msg 全局事务提交，要么同时成功，要么同时失败\n<ol>\n<li>第一个参数为回查 URL，详细含义稍后说</li>\n<li>第二个参数为 sql.DB，是业务访问的数据库对象</li>\n<li>第三个参数是业务函数，我们这个例子中的业务是给 A 扣减 30 元余额</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"成功流程\"><a class=\"anchor\" href=\"#成功流程\">#</a> 成功流程</h2>\n<p>DoAndSubmitDB 是如何保证业务成功执行与 msg 提交的原子性的呢？请看如下的时序图：</p>\n<p><img data-src=\"https://dtm.pub/assets/msg_normal.25a4cb15.jpg\" alt=\"msg_normal\" /></p>\n<p>一般情况下，时序图中的 5 个步骤会正常完成，整个业务按照预期进行，全局事务完成。这里面有个新的内容需要解释一下，就是 msg 的提交是按照两个阶段发起的，第一阶段调用 Prepare，第二阶段调用 Commit，DTM 收到 Prepare 调用后，不会调用分支事务，而是等待后续的 Submit。只有收到了 Submit，开始分支调用，最终完成全局事务。</p>\n<h2 id=\"提交后宕机流程\"><a class=\"anchor\" href=\"#提交后宕机流程\">#</a> 提交后宕机流程</h2>\n<p>在分布式系统中，各类的宕机和网络异常都是需要考虑的，下面我们来看看可能发生的问题：</p>\n<p>首先我们要达到的最重要目标是业务成功执行和 msg 事务是原子操作，因此首先看如果在业务完成提交后，发送 Submit 消息前出现了宕机故障会怎么样，新架构如何保证原子性？</p>\n<p>我们来看看这种情况下的时序图：</p>\n<p><img data-src=\"https://dtm.pub/assets/msg_query.468a998f.jpg\" alt=\"msg_query\" /></p>\n<p>如果在 dtm 收到 Prepare 调用后，AP 在事务提交前，遇见故障宕机，那么数据库会检测到 AP 的连接断开，自动回滚本地事务。</p>\n<p>后续 dtm 轮询取出已经超时的，只 Prepare 但没有 Submit 的全局事务，进行回查。回查服务发现本地事务已回滚，返回结果给 dtm。dtm 收到已回滚的结果后，将全局事务标记为失败，并结束该全局事务。</p>\n<h2 id=\"vs-本地消息表\"><a class=\"anchor\" href=\"#vs-本地消息表\">#</a> .vs 本地消息表</h2>\n<p>上述的问题也可以采用本地消息表方案（方案详情参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDA0MDMyMTc1MA==\">分布式事务最经典的七种解决方案</span>），来保证数据的最终一致性。如果采用本地消息表，需要的工作包括：</p>\n<ul>\n<li>在本地事务中执行本地业务逻辑，将消息插入消息表并最后提交</li>\n<li>编写轮询任务，将本地消息表的消息，发给消息队列</li>\n<li>消费消息，并将消息发给相应的处理服务</li>\n</ul>\n<h2 id=\"vs-事务消息\"><a class=\"anchor\" href=\"#vs-事务消息\">#</a> .vs 事务消息</h2>\n<p>上述的问题也可以采用 RocketMQ 的事务消息方案（方案详情参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDA0MDMyMTc1MA==\">分布式事务最经典的七种解决方案</span>），来保证数据的最终一致性。如果采用事务消息，需要的工作包括：</p>\n<ul>\n<li>发送半消息，开启本地事务，提交本地事务，发送 commit 消息到 RocketMQ</li>\n<li>消费超时的半消息，对于收到的超时半消息，查询本地数据库，然后进行 Commit/Rollback</li>\n<li>消费已提交的消息，并将消息发送给处理服务</li>\n</ul>\n<h2 id=\"更多的优点\"><a class=\"anchor\" href=\"#更多的优点\">#</a> 更多的优点</h2>\n<p>对比于前面讲述的队列方案，二阶段消息还有很多额外的优点：</p>\n<ul>\n<li>二阶段消息整个暴露的接口，完全与队列无关，只跟实际的业务和服务调用相关，对开发人员更加友好</li>\n<li>二阶段消息不用考虑消息队列消息堆积及其他故障等问题，因为二阶段消息只依赖 dtm，开发人员可以认为 dtm 与系统中其他一个普通无状态服务一样，只依赖背后的存储 Mysql/Redis。</li>\n<li>消息队列是异步的，而二阶段消息同时支持异步和同步，默认异步，只需要打开 msg.WaitResult=true，那么可以同步等待下游服务完成</li>\n<li>二阶段消息还支持同时指定多个下游服务</li>\n</ul>\n<h4 id=\"二阶段消息的应用\"><a class=\"anchor\" href=\"#二阶段消息的应用\">#</a> 二阶段消息的应用</h4>\n<p>二阶段消息能够大幅降低消息最终一致性解决方案的难度，已获得广泛的应用，下面是两个典型的应用。</p>\n<ul>\n<li>秒杀系统：该架构下单机可以轻松扛住上万个订单请求，并且保证库存数量和订单数量准确匹配</li>\n<li>缓存一致性：通过二阶段消息，可以轻松保证 DB 与缓存的一致性，大大优于队列或订阅 binlog 的方案</li>\n</ul>\n<h2 id=\"回查原理剖析\"><a class=\"anchor\" href=\"#回查原理剖析\">#</a> 回查原理剖析</h2>\n<p>前面的时序图中，以及接口中都出现了回查服务，在二阶段消息中，是复制粘贴代码自动处理的，而 RocketMQ 的事务消息，则是手动处理的。那么自动处理的原理是什么？</p>\n<p>要进行回查，首先要在业务数据库实例中，建立一张独立的表，里面保存全局事务 id。在处理业务事务时，会把 gid 写入到这张表。</p>\n<p>当我们用 gid 回查时，如果能够在表中查到 gid，那么说明本地事务已提交，这样就可以返回 dtm，告知本地事务已提交。</p>\n<p>当我们用 gid 回查时，没有在表中查到 gid，那么说明本地事务未提交，此时可能的结果是两个，一是事务还在进行中，二是事务已回滚。我查了许多关于 RocketMQ 的资料，未找到有效的解决方案。搜到所有解决方案是，如果未查到结果，那么什么都不做，等待下一次回查，如果 2 分钟或者更久的回查，一直都是查不到的，那么认为本地事务已回滚。</p>\n<p>上述这种方案有很大的问题：</p>\n<ul>\n<li>两分钟还查不到 gid，并不能认为本地事务已回滚，极端情况下，可能发生数据库故障（例如进程或磁盘卡住了），持续时间超过 2 分钟，最后数据又提交了，那么这个时候，数据就不是最终一致了，就需要人工介入处理了</li>\n<li>如果一个本地事务，已经回滚了，但是回查操作，还会在两分钟之内，按照 10s 左右的时间间隔，不断的进行轮询，会给服务器造成不必要的压力</li>\n</ul>\n<p>而 dtm 的二阶段消息方案，则彻底解决了这部分的问题。dtm 的二阶段消息工作过程如下：</p>\n<ol>\n<li>在处理本地事务时，会将 gid 插入到 dtm_barrier.barrier 表中，同时带上插入原因为 committed。该表有一个唯一索引，主要字段为 gid。</li>\n<li>当进行回查时，二阶段消息的操作不是直接查 gid 是否存在，而是再 insert ignore 一条带有相同 gid 的数据，同时带上插入原因为 rollbacked。此时如果表中如果已有 gid 的记录，那么新的插入操作就会被 ignore，否则数据会被插入。</li>\n<li>然后再用 gid 查询表中的记录，如果查到记录的 reason 为 committed，那么说明本地事务已提交；如果查到记录的 reason 为 rollbacked，那么说明本地事务已回滚。</li>\n</ol>\n<p>那么对比 RocketMQ 回查时的常见方案，二阶段消息是如何区分出进行中和已回滚呢？其中的技巧在于回查时插入的数据，如果回查时，数据库的事务还在进行中，那么插入操作就会被进行中的事务阻塞，因为插入操作会等待事务中持有的锁。如果插入操作正常返回，那么数据库中的本地事务，必定已结束，必然是已提交或已回滚。</p>\n<h2 id=\"普通消息\"><a class=\"anchor\" href=\"#普通消息\">#</a> 普通消息</h2>\n<p>二阶段消息不仅可以替换本地消息表方案，也能够替换普通消息方案。如果直接调用 Submit，那么就与普通消息方案近似，但是提供了更灵活简单的接口。</p>\n<p>假设一个这样的应用场景，界面上有一个参加活动的按钮，如果参加活动，会赠与两本电子书的永久权限。这种情况下，可以再这个按钮的服务端中，类似这样处理：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>msg <span class=\"token operator\">:=</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">NewMsg</span><span class=\"token punctuation\">(</span>DtmServer<span class=\"token punctuation\">,</span> gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>busi<span class=\"token punctuation\">.</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/AuthBook\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Req<span class=\"token punctuation\">&#123;</span>UID<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> BookID<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>busi<span class=\"token punctuation\">.</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/AuthBook\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Req<span class=\"token punctuation\">&#123;</span>UID<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> BookID<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>err <span class=\"token operator\">:=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">Submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这种方式也提供了异步接口，而不用依赖消息消息队列。在微服务的许多场景中，可以替换原有的异步消息架构。</p>\n",
            "tags": [
                "后端",
                "分布式事务",
                "事务模式",
                "后端",
                "分布式事务",
                "事务模式"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/6b628305873a/",
            "url": "https://i-wiki.cn/2021/6b628305873a/",
            "title": "分布式事务：DTM SAGA模式",
            "date_published": "2021-09-29T08:21:17.000Z",
            "content_html": "<h1 id=\"saga模式\"><a class=\"anchor\" href=\"#saga模式\">#</a> SAGA 模式</h1>\n<p>SAGA 事务模式是 DTM 中最常用的模式，主要是因为 SAGA 模式简单易用，工作量少，并且能够解决绝大部分业务的需求。</p>\n<blockquote>\n<p>dtm 的 SAGA 模式与 Seata 的 SAGA 在设计理念上是不一样的，整体使用难度大幅度降低，非常容易上手</p>\n</blockquote>\n<p>SAGA 最初出现在 1987 年 Hector Garcaa-Molrna &amp; Kenneth Salem 发表的论文<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MuY29ybmVsbC5lZHUvYW5kcnUvY3M3MTEvMjAwMmZhL3JlYWRpbmcvc2FnYXMucGRm\"> SAGAS</span> 里。其核心思想是将长事务拆分为多个短事务，由 Saga 事务协调器协调，如果每个短事务都成功提交完成，那么全局事务就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。</p>\n<h2 id=\"拆分为子事务\"><a class=\"anchor\" href=\"#拆分为子事务\">#</a> 拆分为子事务</h2>\n<p>例如我们要进行一个类似于银行跨行转账的业务，将 A 中的 30 元转给 B，根据 Saga 事务的原理，我们将整个全局事务，切分为以下服务：</p>\n<ul>\n<li>转出（TransOut）服务，这里转出将会进行操作 A-30</li>\n<li>转出补偿（TransOutCompensate）服务，回滚上面的转出操作，即 A+30</li>\n<li>转入（TransIn）服务，转入将会进行 B+30</li>\n<li>转入补偿（TransInCompensate）服务，回滚上面的转入操作，即 B-30</li>\n</ul>\n<p>整个 SAGA 事务的逻辑是：</p>\n<p>执行转出成功 =&gt; 执行转入成功 =&gt; 全局事务完成</p>\n<p>如果在中间发生错误，例如转入 B 发生错误，则会调用已执行分支的补偿操作，即：</p>\n<p>执行转出成功 =&gt; 执行转入失败 =&gt; 执行转入补偿成功 =&gt; 执行转出补偿成功 =&gt; 全局事务回滚完成</p>\n<p>下面我们看一个成功完成的 SAGA 事务典型的时序图：</p>\n<p><img data-src=\"https://dtm.pub/assets/saga_normal.a2849672.jpg\" alt=\"saga_normal\" /></p>\n<p>在这个图中，我们的全局事务发起人，将整个全局事务的编排信息，包括每个步骤的正向操作和反向补偿操作定义好之后，提交给服务器，服务器就会按步骤执行前面 SAGA 的逻辑。</p>\n<h2 id=\"saga的接入\"><a class=\"anchor\" href=\"#saga的接入\">#</a> SAGA 的接入</h2>\n<p>我们看看 Go 如何接入一个 SAGA 事务</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>req <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"amount\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 微服务的请求 Body</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// DtmServer 为 DTM 服务的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>saga <span class=\"token operator\">:=</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">NewSaga</span><span class=\"token punctuation\">(</span>DtmServer<span class=\"token punctuation\">,</span> shortuuid<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 添加一个 TransOut 的子事务，正向操作为 url: qsBusi+\"/TransOut\"， 逆向操作为 url: qsBusi+\"/TransOutCompensate\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>qsBusi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransOut\"</span><span class=\"token punctuation\">,</span> qsBusi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransOutCompensate\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 添加一个 TransIn 的子事务，正向操作为 url: qsBusi+\"/TransIn\"， 逆向操作为 url: qsBusi+\"/TransInCompensate\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>qsBusi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransIn\"</span><span class=\"token punctuation\">,</span> qsBusi<span class=\"token operator\">+</span><span class=\"token string\">\"/TransInCompensate\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 提交 saga 事务，dtm 会完成所有的子事务 / 回滚所有的子事务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>err <span class=\"token operator\">:=</span> saga<span class=\"token punctuation\">.</span><span class=\"token function\">Submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Hyperf 框架 PHP 接入</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">use</span> <span class=\"token package\">DtmClient<span class=\"token punctuation\">\\</span>Saga</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">use</span> <span class=\"token package\">DtmClient<span class=\"token punctuation\">\\</span>TransContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">use</span> <span class=\"token package\">Hyperf<span class=\"token punctuation\">\\</span>Di<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>Inject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">use</span> <span class=\"token package\">Hyperf<span class=\"token punctuation\">\\</span>HttpServer<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">use</span> <span class=\"token package\">Hyperf<span class=\"token punctuation\">\\</span>HttpServer<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>GetMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token attribute\"><span class=\"token delimiter punctuation\">#[</span><span class=\"token attribute-content\"><span class=\"token attribute-class-name class-name\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token attribute-class-name class-name\">prefix</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'/saga'</span><span class=\"token punctuation\">)</span></span><span class=\"token delimiter punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">SagaController</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$serviceUri</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'http://127.0.0.1:9501'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token attribute\"><span class=\"token delimiter punctuation\">#[</span><span class=\"token attribute-content\"><span class=\"token attribute-class-name class-name\">Inject</span></span><span class=\"token delimiter punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name type-declaration\">Saga</span> <span class=\"token variable\">$saga</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token attribute\"><span class=\"token delimiter punctuation\">#[</span><span class=\"token attribute-content\"><span class=\"token attribute-class-name class-name\">GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token attribute-class-name class-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'successCase'</span><span class=\"token punctuation\">)</span></span><span class=\"token delimiter punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">successCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token variable\">$payload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'amount'</span> <span class=\"token operator\">=></span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 初始化 Saga 事务</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">saga</span><span class=\"token operator\">-></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 增加转出子事务</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">saga</span><span class=\"token operator\">-></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">serviceUri</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/saga/transOut'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">serviceUri</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/saga/transOutCompensate'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token variable\">$payload</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 增加转入子事务</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">saga</span><span class=\"token operator\">-></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">serviceUri</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/saga/transIn'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">serviceUri</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/saga/transInCompensate'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token variable\">$payload</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 提交 Saga 事务</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">saga</span><span class=\"token operator\">-></span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 通过 TransContext::getGid () 获得 全局事务 ID 并返回</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name static-context\">TransContext</span><span class=\"token operator\">::</span><span class=\"token function\">getGid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的代码首先创建了一个 SAGA 事务，然后添加了两个子事务 TransOut、TransIn，每个事务分支包括 action 和 compensate 两个操作，分别为 Add 函数的第一第二个参数。子事务定好之后提交给 dtm。dtm 收到 saga 提交的全局事务后，会调用所有子事务的正向操作，如果所有正向操作成功完成，那么事务成功结束。</p>\n<h2 id=\"高级用法\"><a class=\"anchor\" href=\"#高级用法\">#</a> 高级用法</h2>\n<p>我们以一个真实用户案例，来讲解 dtm 的 saga 部分高级功能。</p>\n<p>问题场景：一个用户出行旅游的应用，收到一个用户出行计划，需要预定去三亚的机票，三亚的酒店，返程的机票。</p>\n<p>要求：</p>\n<ol>\n<li>两张机票和酒店要么都预定成功，要么都回滚（酒店和航空公司提供了相关的回滚接口）</li>\n<li>预订机票和酒店是并发的，避免串行的情况下，因为某一个预定最后确认时间晚，导致其他的预定错过时间</li>\n<li>预定结果的确认时间可能从 1 分钟到 1 天不等</li>\n</ol>\n<p>上述这些要求，正是 saga 事务模式擅长的领域，我们来看看 dtm 怎么解决。</p>\n<p>首先我们根据要求 1，创建一个 saga 事务，这个 saga 包含三个分支，分别是，预定去三亚机票，预定酒店，预定返程机票</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>saga <span class=\"token operator\">:=</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">NewSaga</span><span class=\"token punctuation\">(</span>DtmServer<span class=\"token punctuation\">,</span> gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/BookTicket\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/BookTicketRevert\"</span><span class=\"token punctuation\">,</span> bookTicketInfo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/BookHotel\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/BookHotelRevert\"</span><span class=\"token punctuation\">,</span> bookHotelInfo2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/BookTicket\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/BookTicketRevert\"</span><span class=\"token punctuation\">,</span> bookTicketBackInfo3<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后我们根据要求 2，让 saga 并发执行（默认是顺序执行）</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>saga<span class=\"token punctuation\">.</span><span class=\"token function\">EnableConcurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>最后我们处理 3 里面的 “预定结果的确认时间” 不是即时响应的问题。由于不是即时响应，所以我们不能够让预定操作等待第三方的结果，而是提交预定请求后，就立即返回状态 - 进行中。我们的分支事务未完成，dtm 会重试我们的事务分支，我们把重试间隔指定为 1 分钟。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>saga<span class=\"token punctuation\">.</span>RetryInterval <span class=\"token operator\">=</span> <span class=\"token number\">60</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  saga<span class=\"token punctuation\">.</span><span class=\"token function\">Submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ........</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">bookTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\torder <span class=\"token operator\">:=</span> <span class=\"token function\">loadOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> order <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 尚未下单，进行第三方下单操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\torder <span class=\"token operator\">=</span> <span class=\"token function\">submitTicketOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\torder<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\torder<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询第三方订单状态</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> order<span class=\"token punctuation\">.</span>Status <span class=\"token comment\">// 成功 - SUCCESS 失败 - FAILURE 进行中 - ONGOING</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>固定间隔重试</p>\n<p>dtm 默认情况下，重试策略是指数退避算法，可以避免出现故障时，过多的重试导致负载过高。但是这里订票结果不应当采用指数退避算法重试，否则最终用户不能及时收到通知。因此在 bookTicket 中，返回结果 ONGOING，当 dtm 收到这个结果时，会采用固定间隔重试，这样能及时通知到用户。</p>\n<h2 id=\"更多高级场景\"><a class=\"anchor\" href=\"#更多高级场景\">#</a> 更多高级场景</h2>\n<p>在实际应用中，还遇见过一些业务场景，需要一些额外的技巧进行处理</p>\n<h4 id=\"部分第三方操作无法回滚\"><a class=\"anchor\" href=\"#部分第三方操作无法回滚\">#</a> 部分第三方操作无法回滚</h4>\n<p>例如一个订单中的发货，一旦给出了发货指令，那么涉及线下相关操作，那么很难直接回滚。对于涉及这类情况的 saga 如何处理呢？</p>\n<p>我们把一个事务中的操作分为可回滚的操作，以及不可回滚的操作。那么把可回滚的操作放到前面，把不可回滚的操作放在后面执行，那么就可以解决这类问题</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>saga <span class=\"token operator\">:=</span> dtmcli<span class=\"token punctuation\">.</span><span class=\"token function\">NewSaga</span><span class=\"token punctuation\">(</span>DtmServer<span class=\"token punctuation\">,</span> shortuuid<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/CanRollback1\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/CanRollback1Revert\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/CanRollback2\"</span><span class=\"token punctuation\">,</span> Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/CanRollback2Revert\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/UnRollback1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Busi<span class=\"token operator\">+</span><span class=\"token string\">\"/UnRollback2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token function\">EnableConcurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token function\">AddBranchOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// 指定 step 2，需要在 0，1 完成后执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token function\">AddBranchOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 指定 step 3，需要在 0，1 完成后执行</span></pre></td></tr></table></figure><p>示例中的代码，指定 Step 2，3 中的 UnRollback 操作，必须在 Step 0，1 完成后执行。</p>\n<p>对于不可回滚的操作，DTM 的设计建议是，不可回滚的操作在业务上也不允许返回失败。可以这么思考，如果发货的操作返回了失败，那么这个失败的含义是不够清晰的，调用方不知道这个失败是修改了部分数据的失败，还是修改数据前的业务校验失败，因为这个操作不可回滚，所以调用方收到这个失败，是不知道如何正确处理这个错误的。</p>\n<p>另外当你的一个全局事务中，如果出现了两个既不可回滚的又可能返回失败的操作，那么到了实际运行中，一个执行成功，一个执行失败，此时执行成功的那个事务无法回滚，那么这个事务的一致性就不可能保证了。</p>\n<p>对于发货操作，如果可能在校验数据上可能发生失败，那么将发货操作拆分为发货校验、发货两个服务则会清晰很多，发货校验可回滚，发货不可回滚同时也不会失败。</p>\n<h4 id=\"超时回滚\"><a class=\"anchor\" href=\"#超时回滚\">#</a> 超时回滚<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdG0ucHViL3ByYWN0aWNlL3NhZ2EuaHRtbCMlRTglQjYlODUlRTYlOTclQjYlRTUlOUIlOUUlRTYlQkIlOUE=\">#</span></h4>\n<p>saga 属于长事务，因此持续的时间跨度很大，可能是 100ms 到 1 天，因此 saga 没有默认的超时时间。</p>\n<p>dtm 支持 saga 事务单独指定超时时间，到了超时时间，全局事务就会回滚。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>saga<span class=\"token punctuation\">.</span>TimeoutToFail <span class=\"token operator\">=</span> <span class=\"token number\">1800</span></pre></td></tr></table></figure><p>在 saga 事务中，设置超时时间一定要注意，这类事务里不能够包含无法回滚的事务分支，因为超时回滚时，已执行的无法回滚的分支，数据就是错的。</p>\n",
            "tags": [
                "后端",
                "分布式事务",
                "事务模式",
                "后端",
                "分布式事务",
                "事务模式"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/b520c7c67266/",
            "url": "https://i-wiki.cn/2021/b520c7c67266/",
            "title": "分布式事务：DTM",
            "date_published": "2021-09-29T02:47:15.000Z",
            "content_html": "<h2 id=\"dtm架构图\"><a class=\"anchor\" href=\"#dtm架构图\">#</a> DTM 架构图</h2>\n<p><img data-src=\"https://dtm.pub/assets/arch.8ecd5239.jpg\" alt=\"arch\" /></p>\n<p>整个 DTM 架构中，一共有三个角色，分别承担了不同的功能</p>\n<ul>\n<li>RM - 资源管理器：RM 是一个应用服务，负责管理全局事务中的本地事务，他通常会连接到一个数据库，负责相关数据的修改、提交、回滚、补偿等操作。例如在前面的这个 SAGA 事务中，步骤 2、3 中被调用的 TransIn，TransOut 服务都是 RM，业务上负责 A、B 账户余额的修改</li>\n<li>AP - 应用程序：AP 是一个应用服务，负责全局事务的编排，他会注册全局事务，注册子事务，调用 RM 接口。例如在前面的这个 SAGA 事务中，发起步骤 1 的是 AP，它编排了一个包含 TransOut、TransIn 的全局事务，然后提交给 TM</li>\n<li>TM - 事务管理器：TM 就是 DTM 服务，负责全局事务的管理，每个全局事务都注册到 TM，每个事务分支也注册到 TM。TM 会协调所有的 RM，将同一个全局事务的不同分支，全部提交或全部回滚。例如在前面的 SAGA 事务中，TM 在步骤 2、3 中调用了各个 RM，在步骤 4 中，完成这个全局事务</li>\n</ul>\n<h2 id=\"接口协议\"><a class=\"anchor\" href=\"#接口协议\">#</a> 接口协议</h2>\n<p>目前 dtm 只支持 http 和 grpc 协议，以及在这基础上的部分微服务协议。由于分布式事务涉及分布式协作，某些参与者可能出现暂时不可用或者返回 500 等异常情况是不可避免的。这些暂时不可用和 500，与业务上的失败有非常大的区别。</p>\n<blockquote>\n<h5 id=\"接口错误与业务失败\"><a class=\"anchor\" href=\"#接口错误与业务失败\">#</a> 接口错误与业务失败</h5>\n<p>例如前面的转出金额操作，如果遇见暂时不可用，或者 500，此时不应当认为转账失败，而进行回滚。</p>\n<p>有个 dtm 的用户，在未使用分布式事务的旧系统中，曾经遇到过这类事故，起因是开发人员在调用发红包后，因为调用超时，认为发红包失败，没有扣减用户的余额，但是当红包服务恢复正常后，发现红包已发出，这就导致了金额错误，造成了事故。</p>\n<p>因此进行分布式事务开发时，切记 <strong>接口返回错误 不等于 业务失败</strong></p>\n</blockquote>\n<p>对于上述的 ” 暂时不可用 “及” 500“，DTM 会进行重试。而对于成功或失败等确定的结果，则会更新分布式事务的进度。</p>\n<p>dtm 系统中，调用分支事务的服务，有四种结果：</p>\n<ul>\n<li><strong>SUCCESS:</strong> 表示成功</li>\n<li><strong>FAILURE:</strong> 表示失败，这个失败是指确定的失败结果，不需要重试。例如子事务因转账余额不足而失败，dtm 服务因为事务已完成不允许再次提交等</li>\n<li><strong>ONGOING:</strong> 表示未完成，还在正常进行中，此时 dtm 服务器需要采用固定间隔重试，而不是指数退避算法重试</li>\n<li><strong>其他:</strong> 表示临时错误，采用指数退避算法重试，避免出现故障或者 bug，导致大量重试，导致负载过高</li>\n</ul>\n<blockquote>\n<h5 id=\"ongoing\"><a class=\"anchor\" href=\"#ongoing\">#</a> ONGOING</h5>\n<p>DTM 引入了一个特殊的结果 ONGOING，当 DTM 收到这个返回值时，认为这个子事务操作还在正常进行中，还未完成，需要进行重试。假如你需要预定旅游出行的机票，第三方可能需要 1 个小时才能够确认机票预定的结果，那么应用可以指定分布式事务的重试间隔时间，并在未获得确定结果时，返回 ONGOING，这样 DTM 会按照固定间隔时间重试</p>\n</blockquote>\n<p>下面分别说明 HTTP 和 gRPC 中，如何表示含义明确的三种结果</p>\n<h4 id=\"http\"><a class=\"anchor\" href=\"#http\">#</a> HTTP</h4>\n<ul>\n<li><strong>SUCCESS:</strong> 状态码 200 StatusOK</li>\n<li><strong>FAILURE:</strong> 状态码 409 StatusConflict</li>\n<li><strong>ONGOING:</strong> 状态码 425 StatusTooEarly</li>\n</ul>\n<h4 id=\"grpc\"><a class=\"anchor\" href=\"#grpc\">#</a> gRPC</h4>\n<ul>\n<li><strong>SUCCESS:</strong> 状态码 OK</li>\n<li><strong>FAILURE:</strong> 状态码 Aborted</li>\n<li><strong>ONGOING:</strong> 状态码 FailedPrecondition</li>\n</ul>\n<p>以上 HTTP 和 gRPC 的几个结果定义，对于云原生上的重试策略是友好兼容的，默认情况下，如果微服务配置了重试策略，那么对于其他结果（通常为 HTTP 502 或者 gRPC Unavailable）会进行重试，而确定的结果，则不会被云原生上的重试策略重试。</p>\n<p>还有一点，对于某些不支持回滚的事务分支，例如 Msg 模式的分支，Saga 模式的 Compensation，Tcc 模式的 Confirm/Cancel，在这些分支里面不应当返回 FAILURE</p>\n<h2 id=\"与xa-dtp模型异同\"><a class=\"anchor\" href=\"#与xa-dtp模型异同\">#</a> 与 XA DTP 模型异同</h2>\n<p>DTM 的架构和角色，与 X/Open XA 的 DTP 模型一致，RM、AP、TM 担当的功能都是一致的，只是将 XA 的 DTP 模型拓展到了服务 / 微服务架构上。</p>\n<p>DTM 对比了其他事务框架的角色划分和 DTP 的角色划分，认为 DTP 在总体架构，依旧能够适用于跨服务这种分布式事务形式，因此保留了 AP、RM、TM 的划分</p>\n<p><img data-src=\"https://dtm.pub/assets/xa-dtp.62f4d7d0.png\" alt=\"xa-dtp\" /></p>\n<p>主要区别如下：</p>\n<ul>\n<li>TM 不再是单点，而是集群部署，本身就具备高可用。原先 2PC 中的单点问题，就被集群化的 dtm 实例 + 共享的高可用存储解决了。这其中没有复杂的选举过程，而是依赖云服务上提供的高可用共享存储引擎（云服务商户进行故障重新选举，用户不用关心）</li>\n<li>RM 不是直接的数据库，而是服务，服务的与他背后数据库交互。TM 与 RM 服务交互，而不会与数据库直接交互</li>\n<li>AP 不是直接的本地程序，而是服务，他对 RM 的访问，是通过网络的 api 请求，而不是本地 SDK 调用。</li>\n</ul>\n",
            "tags": [
                "后端",
                "分布式事务",
                "后端",
                "分布式事务",
                "DTM"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/0d3f3db47143/",
            "url": "https://i-wiki.cn/2021/0d3f3db47143/",
            "title": "分布式事务：理论篇",
            "date_published": "2021-09-28T08:18:01.000Z",
            "content_html": "<h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<p>事务具有 4 个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为 ACID 特性。</p>\n<ul>\n<li>Atomicity（原子性）：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复到事务开始前的状态，就像这个事务从来没有执行过一样。</li>\n</ul>\n<ul>\n<li>Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。完整性包括外键约束、应用定义的等约束不会被破坏。</li>\n<li>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。</li>\n<li>Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>\n</ul>\n<p>主流的数据库例如 Mysql、Postgres 等，都支持 ACID 事务，其内部会采用 MVCC（多版本并发控制）技术，实现高性能、高并发的本地事务</p>\n<h2 id=\"分布式理论\"><a class=\"anchor\" href=\"#分布式理论\">#</a> 分布式理论</h2>\n<p>分布式事务涉及多个节点，是一个典型的分布式系统，与单机系统有非常大的差别。一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项，这被称为 CAP 理论。</p>\n<h4 id=\"c-一致性\"><a class=\"anchor\" href=\"#c-一致性\">#</a> C 一致性</h4>\n<p>分布式系统中，数据一般会存在不同节点的副本中，如果对第一个节点的数据成功进行了更新操作，而第二个节点上的数据却没有得到相应更新，这时候读取第二个节点的数据依然是更新前的数据，即脏数据，这就是分布式系统数据不一致的情况。</p>\n<p>在分布式系统中，如果能够做到针对一个数据项的更新操作执行成功后，所有的用户都能读取到最新的值，那么这样的系统就被认为具有强一致性（或严格的一致性）。</p>\n<p>请注意 CAP 中的一致性和 ACID 中的一致性，虽然单词相同，但实际含义不同，请注意区分</p>\n<h4 id=\"a-可用性\"><a class=\"anchor\" href=\"#a-可用性\">#</a> A 可用性</h4>\n<p>在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。</p>\n<p>在现代的互联网应用中，如果因为服务器宕机等问题，导致服务长期不可用，是不可接受的</p>\n<h4 id=\"p-分区容错性\"><a class=\"anchor\" href=\"#p-分区容错性\">#</a> P 分区容错性</h4>\n<p>以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择。</p>\n<p>提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项仍然能在其他区中读取，容忍性就提高了。然而，把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。</p>\n<h3 id=\"面临的问题\"><a class=\"anchor\" href=\"#面临的问题\">#</a> 面临的问题：</h3>\n<p>​\t\t对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到 N 个 9，即保证 P 和 A，舍弃 C。</p>\n<h4 id=\"base理论\"><a class=\"anchor\" href=\"#base理论\">#</a> BASE 理论</h4>\n<p>BASE 是 Basically Available（基本可用）、Soft state（软状态）和 Eventually consistent（最终一致性）三个短语的简写，BASE 是对 CAP 中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的结论，是基于 CAP 定理逐步演化而来的，其核心思想是即使无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。接下来我们着重对 BASE 中的三要素进行详细讲解。</p>\n<ul>\n<li>基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性 —— 但请注意，这绝不等价于系统不可用。</li>\n<li>弱状态也称为软状态，和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</li>\n<li>最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性</li>\n</ul>\n<p>总的来说，BASE 理论面向的是大型高可用可扩展的分布式系统，提出通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。</p>\n<p>许多的 NoSQL 是按照 BASE 理论进行设计的，典型的例子包括：Dynamo、Cassandra、CouchDB。</p>\n<h2 id=\"分布式事务\"><a class=\"anchor\" href=\"#分布式事务\">#</a> 分布式事务</h2>\n<p>银行跨行转账业务是一个典型分布式事务场景，假设 A 需要跨行转账给 B，那么就涉及两个银行的数据，无法通过一个数据库的本地事务保证转账的 ACID，只能够通过分布式事务来解决。</p>\n<p>分布式事务就是指事务的发起者、资源及资源管理器和事务协调者分别位于分布式系统的不同节点之上。在上述转账的业务中，用户 A-100 操作和用户 B+100 操作不是位于同一个节点上。本质上来说，分布式事务就是为了保证在分布式场景下，数据操作的正确执行。</p>\n<p>分布式事务可以分为两类：</p>\n<ul>\n<li>第一类为：NewSQL 的内部分布式事务</li>\n<li>第二类为：跨数据库、跨服务的分布式事务</li>\n</ul>\n<h4 id=\"分布式事务一致性\"><a class=\"anchor\" href=\"#分布式事务一致性\">#</a> 分布式事务一致性</h4>\n<p>目前分布式事务都无法做到强一致性，只能保证最终一致性，即最终事务完成时，数据严格满足业务约束</p>\n<p>一致性由强到弱分别是：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdG0ucHViL3ByYWN0aWNlL3hhLmh0bWw=\">XA 事务</span> &gt;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdG0ucHViL3ByYWN0aWNlL3RjYy5odG1s\">TCC</span>&gt;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdG0ucHViL3ByYWN0aWNlL21zZy5odG1s\"> 二阶段消息</span> &gt;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdG0ucHViL3ByYWN0aWNlL3NhZ2EuaHRtbA==\">SAGA</span></p>\n<p><img data-src=\"https://dtm.pub/assets/c-classify.73742507.png\" alt=\"c-classify\" /></p>\n<ul>\n<li><strong>不一致窗口短</strong>：XA 和 TCC 在理想的情况下，可以做到不一致的窗口时间很短</li>\n<li><strong>不一致窗口长</strong>：SAGA 和 MSG 则缺少控制不一致窗口时间的方法，相对来说会更长</li>\n<li><strong>XA</strong>：XA 虽然不是强一致，但是 XA 的一致性是多种分布式事务中，一致性最好的，因为他处于不一致的状态时间很短，只有一部分分支开始 commit，但还没有全部 commit 的这个时间窗口，数据是不一致的。因为数据库的 commit 操作耗时，通常是 10ms 内，因此不一致的窗口期很短。</li>\n<li><strong>TCC</strong>：理论上，TCC 可以用 XA 来实现，例如 Try-Prepare，Confirm-Commit，Cancel-Rollback。但绝大多数时候，TCC 会在业务层自己实现 Try|Confirm|Cancel，因此 Confirm 操作耗时，通常高于 XA 中的 Commit，不一致的窗口时间比 XA 长</li>\n<li><strong>MSG</strong>：二阶消息型事务在第一个操作完成后，在所有操作完成之前，这个时间窗口是不一致的，持续时长一般比前两者更久。</li>\n<li><strong>SAGA</strong>：SAGA 的不一致窗口时长与消息接近，但是如果发生回滚，而子事务中正向操作修改的数据又会被用户看到，这部分数据就是错误数据，容易给用户带来较差的体验，因此一致性是最差的</li>\n</ul>\n<h2 id=\"分布式事务的经典解决方案\"><a class=\"anchor\" href=\"#分布式事务的经典解决方案\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDA0MDMyMTc1MA==\">分布式事务的经典解决方案</span></h2>\n<ol>\n<li>两阶段提交 / XA</li>\n<li>SAGA</li>\n<li>TCC</li>\n<li>本地消息表</li>\n<li>事务消息</li>\n<li>最大努力通知</li>\n<li>AT 事务模式</li>\n</ol>\n",
            "tags": [
                "后端",
                "分布式事务",
                "后端",
                "分布式事务"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/86103141b6be/",
            "url": "https://i-wiki.cn/2021/86103141b6be/",
            "title": "hyperf学习笔记",
            "date_published": "2021-09-27T10:54:09.000Z",
            "content_html": "",
            "tags": [
                "PHP",
                "框架",
                "学习笔记",
                "PHP"
            ]
        },
        {
            "id": "https://i-wiki.cn/2021/78228f97963e/",
            "url": "https://i-wiki.cn/2021/78228f97963e/",
            "title": "Go iota 常量计数器",
            "date_published": "2021-01-02T04:39:12.000Z",
            "content_html": "<h3 id=\"iota\"><a class=\"anchor\" href=\"#iota\">#</a> iota</h3>\n<p><code>iota</code>  是 <code>go</code>  语言的常量计数器，只能在常量的表达式中使用。  <code>iota</code>  在 <code>const</code>  关键字出现时将被重置为 <code>0</code> 。 <code>const</code>  中每新增一行常量声明将使 <code>iota</code>  计数一次 ( <code>iota</code>  可理解为 <code>const</code>  语句块中的行索引)。 使用 <code>iota</code>  能简化定义，在定义枚举时很有用。</p>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            n1 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            n2        <span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            n3        <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            n4        <span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"122-几个常见的iota示例\"><a class=\"anchor\" href=\"#122-几个常见的iota示例\">#</a> 1.2.2. 几个常见的 iota 示例:</h3>\n<p>使用_跳过某些值</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            n1 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            n2        <span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token boolean\">_</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            n4        <span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>iota</code>  声明中间插队</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            n1 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            n2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span>  <span class=\"token comment\">//100</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            n3 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            n4        <span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> n5 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">//0</span></pre></td></tr></table></figure><p>定义数量级 （这里的 <code>&lt;&lt;</code>  表示左移操作， <code>1&lt;&lt;10</code>  表示将 <code>1</code>  的二进制表示向左移 <code>10</code>  位，也就是由 <code>1</code>  变成了 <code>10000000000</code> ，也就是十进制的 <code>1024</code> 。同理 <code>2&lt;&lt;2</code>  表示将 <code>2</code>  的二进制表示向左移 <code>2</code>  位，也就是由 <code>10</code>  变成了 <code>1000</code> ，也就是十进制的 <code>8</code> 。）</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 左移 n 位就是 乘以 2 的 n 次方</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 右移 n 位就是  除以 2 的你次方</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token boolean\">_</span>  <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            KB <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">iota</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            MB <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">iota</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            GB <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">iota</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            TB <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">iota</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            PB <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">iota</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>多个 <code>iota</code>  定义在一行</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">iota</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token comment\">//1,2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            c<span class=\"token punctuation\">,</span> d                      <span class=\"token comment\">//2,3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            e<span class=\"token punctuation\">,</span> f                      <span class=\"token comment\">//3,4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "后端",
                "go",
                "后端",
                "go"
            ]
        },
        {
            "id": "https://i-wiki.cn/2020/9982038c8ca6/",
            "url": "https://i-wiki.cn/2020/9982038c8ca6/",
            "title": "aria2 配置文件",
            "date_published": "2020-12-27T11:03:23.000Z",
            "content_html": "<pre><code>## '#'开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##\n## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##\n\n## 文件保存相关 ##\n\n# 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置\ndir=/Users/ppyylee/Downloads\n# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M\n#disk-cache=32M\n# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc\n# 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc\n# falloc和trunc则需要文件系统和内核支持\n# NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项\n#file-allocation=none\n# 断点续传\ncontinue=true\n\n## 下载连接相关 ##\n\n# 最大同时下载任务数, 运行时可修改, 默认:5\n#max-concurrent-downloads=5\n# 同一服务器连接数, 添加时可指定, 默认:1\nmax-connection-per-server=5\n# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M\n# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载\nmin-split-size=10M\n# 单个任务最大线程数, 添加时可指定, 默认:5\n#split=5\n# 整体下载速度限制, 运行时可修改, 默认:0\n#max-overall-download-limit=0\n# 单个任务下载速度限制, 默认:0\n#max-download-limit=0\n# 整体上传速度限制, 运行时可修改, 默认:0\n#max-overall-upload-limit=0\n# 单个任务上传速度限制, 默认:0\n#max-upload-limit=0\n# 禁用IPv6, 默认:false\n#disable-ipv6=true\n# 连接超时时间, 默认:60\n#timeout=60\n# 最大重试次数, 设置为0表示不限制重试次数, 默认:5\n#max-tries=5\n# 设置重试等待的秒数, 默认:0\n#retry-wait=0\n\n## 进度保存相关 ##\n\n# 从会话文件中读取下载任务\ninput-file=/opt/homebrew/Cellar/aria2/1.36.0/bin/aria2.session\n# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件\nsave-session=/opt/homebrew/Cellar/aria2/1.36.0/bin/aria2.session\n# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0\n#save-session-interval=60\n\n## RPC相关设置 ##\n\n# 启用RPC, 默认:false\nenable-rpc=true\n# 允许所有来源, 默认:false\nrpc-allow-origin-all=true\n# 允许非外部访问, 默认:false\nrpc-listen-all=true\n# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同\n#event-poll=select\n# RPC监听端口, 端口被占用时可以修改, 默认:6800\n#rpc-listen-port=6800\n# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项\n#rpc-secret=&lt;TOKEN&gt;\n# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项\n#rpc-user=&lt;USER&gt;\n# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项\n#rpc-passwd=&lt;PASSWD&gt;\n# 是否启用 RPC 服务的 SSL/TLS 加密,\n# 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接\n#rpc-secure=true\n# 在 RPC 服务中启用 SSL/TLS 加密时的证书文件,\n# 使用 PEM 格式时，您必须通过 --rpc-private-key 指定私钥\n#rpc-certificate=/path/to/certificate.pem\n# 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件\n#rpc-private-key=/path/to/certificate.key\n\n## BT/PT下载相关 ##\n\n# 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true\n#follow-torrent=true\n# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999\nlisten-port=51413\n# 单个种子最大连接数, 默认:55\n#bt-max-peers=55\n# 打开DHT功能, PT需要禁用, 默认:true\nenable-dht=false\n# 打开IPv6 DHT功能, PT需要禁用\n#enable-dht6=false\n# DHT网络监听端口, 默认:6881-6999\n#dht-listen-port=6881-6999\n# 本地节点查找, PT需要禁用, 默认:false\n#bt-enable-lpd=false\n# 种子交换, PT需要禁用, 默认:true\nenable-peer-exchange=false\n# 每个种子限速, 对少种的PT很有用, 默认:50K\n#bt-request-peer-speed-limit=50K\n# 客户端伪装, PT需要\npeer-id-prefix=-TR2770-\nuser-agent=Transmission/2.77\npeer-agent=Transmission/2.77\n# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0\nseed-ratio=0\n# 强制保存会话, 即使任务已经完成, 默认:false\n# 较新的版本开启后会在任务完成后依然保留.aria2文件\n#force-save=false\n# BT校验相关, 默认:true\n#bt-hash-check-seed=true\n# 继续之前的BT任务时, 无需再次校验, 默认:false\nbt-seed-unverified=true\n# 保存磁力链接元数据为种子文件(.torrent文件), 默认:false\nbt-save-metadata=true\n</code></pre>\n",
            "tags": [
                "工具",
                "aria2",
                "配置文件",
                "工具",
                "配置文件",
                "aria2"
            ]
        }
    ]
}